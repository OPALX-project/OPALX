CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

IF (GIT_FOUND)
    SET (IPPL_WC_REVISION 0)
    EXECUTE_PROCESS (
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        COMMAND git rev-parse HEAD
        OUTPUT_VARIABLE GIT_OUT OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_VARIABLE DEV_NULL
        )
    SET (IPPL_WC_REVISION \"${GIT_OUT}\")
ENDIF ()

CONFIGURE_FILE (config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/config.h)

MESSAGE (STATUS "configure: make IpplInfo.h")
EXECUTE_PROCESS (
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMAND date
    OUTPUT_VARIABLE DATE_OUT OUTPUT_STRIP_TRAILING_WHITESPACE
    )
EXECUTE_PROCESS (
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMAND uname -a
    OUTPUT_VARIABLE UNAME_OUT OUTPUT_STRIP_TRAILING_WHITESPACE
    )
EXECUTE_PROCESS (
    COMMAND whoami
    OUTPUT_VARIABLE WHOAMI_OUT OUTPUT_STRIP_TRAILING_WHITESPACE
    )

SET (IPPL_COMPILE_ARCH \"$ENV{IPPL_ARCH}\")
SET (IPPL_COMPILE_LINE \"${CMAKE_CXX_FLAGS}\")
SET (IPPL_COMPILE_DATE \"${DATE_OUT}\")
SET (IPPL_COMPILE_MACHINE \"${UNAME_OUT}\")
SET (IPPL_COMPILE_OPTIONS \"${CXXDEFINES}\")
SET (IPPL_COMPILE_USER \"${WHOAMI_OUT}\")
EXECUTE_PROCESS (
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMAND bin/findFiles.sh
    OUTPUT_VARIABLE IPPL_VERSION_LOG
    )
CONFIGURE_FILE (IpplVersions.h.in ${CMAKE_CURRENT_SOURCE_DIR}/IpplVersions.h)

### print the compiler flags #############################
SET (PRETTY_PRINT_WIDTH 78)
STRING (TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_STR)
SET (COMPILE_FLAGS_STR
    "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_STR}}")
STRING (REGEX REPLACE " +" ";" COMPILE_FLAGS_LIST ${COMPILE_FLAGS_STR})

LIST (LENGTH COMPILE_FLAGS_LIST NUMBER_OF_COMPILE_FLAGS)
SET (CURRENT_FLAG_INDEX 0)

MESSAGE (STATUS "")
MESSAGE (STATUS "Building IPPL with:")
WHILE (${CURRENT_FLAG_INDEX} LESS ${NUMBER_OF_COMPILE_FLAGS})
    SET (FLAGS_PRETTY_PRINT "")

    LIST (GET COMPILE_FLAGS_LIST ${CURRENT_FLAG_INDEX} CURRENT_FLAG)
    STRING (LENGTH ${CURRENT_FLAG} LENGTH_INCL_NEXT)

    WHILE (${LENGTH_INCL_NEXT} LESS ${PRETTY_PRINT_WIDTH})
        SET (FLAGS_PRETTY_PRINT
            "${FLAGS_PRETTY_PRINT} ${CURRENT_FLAG}")

        MATH (EXPR CURRENT_FLAG_INDEX "(${CURRENT_FLAG_INDEX} + 1)")

        IF (${CURRENT_FLAG_INDEX} EQUAL ${NUMBER_OF_COMPILE_FLAGS})
            SET (LENGTH_INCL_NEXT ${PRETTY_PRINT_WIDTH})
        ELSE(${CURRENT_FLAG_INDEX} EQUAL ${NUMBER_OF_COMPILE_FLAGS})
            LIST (GET COMPILE_FLAGS_LIST ${CURRENT_FLAG_INDEX} CURRENT_FLAG)
            IF (CURRENT_FLAG)
                STRING (LENGTH ${CURRENT_FLAG} LENGTH_CURRENT_FLAG)
                MATH (EXPR LENGTH_INCL_NEXT "${LENGTH_INCL_NEXT} + 1 + ${LENGTH_CURRENT_FLAG}")
            ENDIF (CURRENT_FLAG)
        ENDIF(${CURRENT_FLAG_INDEX} EQUAL ${NUMBER_OF_COMPILE_FLAGS})

    ENDWHILE (${LENGTH_INCL_NEXT} LESS ${PRETTY_PRINT_WIDTH})
    STRING (STRIP ${FLAGS_PRETTY_PRINT} FLAGS_PRETTY_PRINT)
    MESSAGE (STATUS "${FLAGS_PRETTY_PRINT}")
ENDWHILE()
MESSAGE (STATUS "")

SET (IPPL_SRCS_FORT
#    FFT/fftpack.F
    )

SET (IPPL_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR})
MACRO (ADD_SOURCES )
    FILE (RELATIVE_PATH _relPath "${IPPL_SRC_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
    FOREACH (_src ${ARGN})
        IF (_relPath)
            LIST (APPEND IPPL_SRCS "${_relPath}/${_src}")
        ELSE ()
            LIST (APPEND IPPL_SRCS "${_src}")
        ENDIF ()
    ENDFOREACH ()
    IF (_relPath)
        # propagate SRCS to parent directory
        SET (IPPL_SRCS ${IPPL_SRCS} PARENT_SCOPE)
    ENDIF ()
ENDMACRO ()

MACRO (ADD_HEADERS )
    FILE (RELATIVE_PATH _relPath "${IPPL_SRC_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
    FOREACH (_hdr ${ARGN})
        IF (_relPath)
            LIST (APPEND IPPL_HDRS "${_relPath}/${_hdr}")
        ELSE ()
            LIST (APPEND IPPL_HDRS "${_hdr}")
        ENDIF ()
    ENDFOREACH ()
    IF (_relPath)
        # propagate HDRS to parent directory
        SET (IPPL_HDRS ${IPPL_HDRS} PARENT_SCOPE)
    ENDIF ()
ENDMACRO ()

SET (IPPL_BASEDIR_HDRS
    Ippl.h
    IpplVersions.h
    )
ADD_HEADERS (${IPPL_BASEDIR_HDRS})

ADD_SUBDIRECTORY (AppTypes)
ADD_SUBDIRECTORY (DataSource)
ADD_SUBDIRECTORY (DomainMap)
ADD_SUBDIRECTORY (FFT)
ADD_SUBDIRECTORY (Field)
ADD_SUBDIRECTORY (FieldLayout)
ADD_SUBDIRECTORY (Index)
ADD_SUBDIRECTORY (Meshes)
ADD_SUBDIRECTORY (Message)
ADD_SUBDIRECTORY (Particle)
ADD_SUBDIRECTORY (PETE)
ADD_SUBDIRECTORY (Region)
ADD_SUBDIRECTORY (SubField)
ADD_SUBDIRECTORY (SubParticle)
ADD_SUBDIRECTORY (Utility)

SET (MAKE_DEF
    ../test/Makefile.def
    )


INCLUDE_DIRECTORIES (
    BEFORE ${CMAKE_CURRENT_SOURCE_DIR}
    )

IF (ENABLE_DKS)

    MESSAGE (STATUS "DKS include dirs: ${DKS_INCLUDE_DIR}")
    INCLUDE_DIRECTORIES (${DKS_INCLUDE_DIR})
    LINK_DIRECTORIES(${DKS_LIBRARY_DIR})

ENDIF (ENABLE_DKS)

ADD_LIBRARY ( ippl ${IPPL_SRCS} ${IPPL_SRCS_FORT} )

IF (ENABLE_DKS)
    #TARGET_LINK_LIBRARIES(ippl dks)
    TARGET_LINK_LIBRARIES(ippl 
    dks
    ${DKS_CUDA_LIBS}
    )
ELSE ()
    TARGET_LINK_LIBRARIES(ippl)
ENDIF (ENABLE_DKS)

INSTALL (FILES ${MAKE_DEF} DESTINATION lib)
INSTALL (TARGETS ippl DESTINATION lib)
INSTALL (FILES ${IPPL_BASEDIR_HDRS} DESTINATION include)
